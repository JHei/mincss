#!/usr/bin/env python

import os
import re
import logging
from time import sleep
import tornado.httpserver
import tornado.ioloop
from tornado.options import define, options
from tornado_utils.routes import route
import settings
import handlers


define("debug", default=False, help="run in debug mode", type=bool)
define("port", default=8000, help="run on the given port", type=int)


class Application(tornado.web.Application):

    def __init__(self):
        ui_modules_map = {}
        for each in ('ui_modules',):
            _ui_modules = __import__(each, globals(), locals(),
                                     ['ui_modules'], -1)
            for name in [x for x in dir(_ui_modules)
                         if re.findall('[A-Z]\w+', x)]:
                thing = getattr(_ui_modules, name)
                try:
                    if issubclass(thing, tornado.web.UIModule):
                        ui_modules_map[name] = thing
                except TypeError:  # pragma: no cover
                    # most likely a builtin class or something
                    pass

        routed_handlers = route.get_routes()
        app_settings = dict(
            template_path=os.path.join(os.path.dirname(__file__), "templates"),
            static_path=os.path.join(os.path.dirname(__file__), "static"),
            cookie_secret=settings.COOKIE_SECRET,
            xsrf_cookies=True,
            debug=options.debug,
            email_backend=options.debug and \
                 'tornado_utils.send_mail.backends.console.EmailBackend' \
              or 'tornado_utils.send_mail.backends.pickle.EmailBackend',
            admin_emails=settings.ADMIN_EMAILS,
            ui_modules=ui_modules_map,
            embed_static_url_timestamp=not options.dont_embed_static_url,
            optimize_static_content=optimize_static_content,
            cdn_prefix=cdn_prefix,
            CLOSURE_LOCATION=os.path.join(os.path.dirname(__file__),
                                          "static", "compiler.jar"),
            twitter_consumer_key=settings.TWITTER_CONSUMER_KEY,
            twitter_consumer_secret=settings.TWITTER_CONSUMER_SECRET,

        )
        routed_handlers.append(
            tornado.web.url('/.*?',
                            handlers.PageNotFoundHandler,
                            name='page_not_found')
        )
        super(Application, self).__init__(routed_handlers, **app_settings)


def main():
    tornado.options.parse_command_line()

    http_server = tornado.httpserver.HTTPServer(Application())
    print "Starting tornado on port", options.port
    http_server.listen(options.port)
    try:
        tornado.ioloop.IOLoop.instance().start()
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    main()
